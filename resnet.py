import os
import csv
import json
import torch
import torch.nn as nn
import torchvision.models as models
from PIL import Image
from torchvision import transforms

'''
Use the average pooling layer of a pretrained ResNet model to
generate object-embedding pairs corresponding to each given ImageNet image
'''

'''
Resnet을 이용하여 주어진 각 ImageNet의 image에 대한 object-embedding pair를 생성 
'''

#-----LOAD MODEL-----#
#model = models.resnet50(pretrained=True)
model = models.resnet101(pretrained=True)
#model = models.resnet152(pretrained=True)

# Access average pooling layer in network
# Resnet의 average pooling layer만 가져옴
model_avgpool = nn.Sequential(*list(model.children())[:-1])
model_avgpool.eval() 
#이미지 전처리
preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])


#-----USE MODEL-----#
labels = {}

#object-embedding이 들어있는 파일을 읽음
with open('data/object-embedding.csv', 'w', newline='') as out: 
    #below file is generated by imagenet.py
    with open('data/image_label.json') as data: #이거는 안보임
        csvwriter = csv.writer(out, delimiter=',')
        for line in data:
            image_label = json.loads(line) #이미지 label을 가져옴

        #substitute with your own path to the ILSVRC2012 validation image set
        dir = '/home/thao/Downloads/ILSVRC2012_img_val' #이미지셋의 경로로 변경
        for f in os.listdir(dir):
            input_image = Image.open(os.path.join(dir, f))
            input_tensor = preprocess(input_image)
            input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model

            # move the input and model to GPU for speed if available
            if torch.cuda.is_available():
                input_batch = input_batch.to('cuda')
                model_avgpool.to('cuda')

            with torch.no_grad():
                try:
                    output = model_avgpool(input_batch) #이미지를 모델에 넣음
                except:
                    print(os.path.join(dir, f))
                output = torch.flatten(output, 1) #출력값을 flatten
                csvwriter.writerow((image_label[f], output[0].tolist(), f)) #list로 만들어서 저장
